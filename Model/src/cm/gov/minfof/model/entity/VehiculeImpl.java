package cm.gov.minfof.model.entity;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Sep 18 16:12:33 WAT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VehiculeImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Idvehicule,
        Idtransporteur,
        Idregion,
        Idtypevehicule,
        Codechiffre,
        SuffixLettre,
        Immatriculation,
        Vehicule,
        IdtypevehiculeVehicule,
        Vehicule1,
        IdregionVehicule,
        Vehicule2,
        IdtransporteurVehicule,
        Transporteur,
        Region,
        Typevehicule;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDVEHICULE = AttributesEnum.Idvehicule.index();
    public static final int IDTRANSPORTEUR = AttributesEnum.Idtransporteur.index();
    public static final int IDREGION = AttributesEnum.Idregion.index();
    public static final int IDTYPEVEHICULE = AttributesEnum.Idtypevehicule.index();
    public static final int CODECHIFFRE = AttributesEnum.Codechiffre.index();
    public static final int SUFFIXLETTRE = AttributesEnum.SuffixLettre.index();
    public static final int IMMATRICULATION = AttributesEnum.Immatriculation.index();
    public static final int VEHICULE = AttributesEnum.Vehicule.index();
    public static final int IDTYPEVEHICULEVEHICULE = AttributesEnum.IdtypevehiculeVehicule.index();
    public static final int VEHICULE1 = AttributesEnum.Vehicule1.index();
    public static final int IDREGIONVEHICULE = AttributesEnum.IdregionVehicule.index();
    public static final int VEHICULE2 = AttributesEnum.Vehicule2.index();
    public static final int IDTRANSPORTEURVEHICULE = AttributesEnum.IdtransporteurVehicule.index();
    public static final int TRANSPORTEUR = AttributesEnum.Transporteur.index();
    public static final int REGION = AttributesEnum.Region.index();
    public static final int TYPEVEHICULE = AttributesEnum.Typevehicule.index();

    /**
     * This is the default constructor (do not remove).
     */
    public VehiculeImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("cm.gov.minfof.model.entity.Vehicule");
    }


    /**
     * Gets the attribute value for Idvehicule, using the alias name Idvehicule.
     * @return the value of Idvehicule
     */
    public BigDecimal getIdvehicule() {
        return (BigDecimal) getAttributeInternal(IDVEHICULE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idvehicule.
     * @param value value to set the Idvehicule
     */
    public void setIdvehicule(BigDecimal value) {
        setAttributeInternal(IDVEHICULE, value);
    }

    /**
     * Gets the attribute value for Idtransporteur, using the alias name Idtransporteur.
     * @return the value of Idtransporteur
     */
    public BigDecimal getIdtransporteur() {
        return (BigDecimal) getAttributeInternal(IDTRANSPORTEUR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idtransporteur.
     * @param value value to set the Idtransporteur
     */
    public void setIdtransporteur(BigDecimal value) {
        setAttributeInternal(IDTRANSPORTEUR, value);
    }

    /**
     * Gets the attribute value for Idregion, using the alias name Idregion.
     * @return the value of Idregion
     */
    public BigDecimal getIdregion() {
        return (BigDecimal) getAttributeInternal(IDREGION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idregion.
     * @param value value to set the Idregion
     */
    public void setIdregion(BigDecimal value) {
        setAttributeInternal(IDREGION, value);
    }

    /**
     * Gets the attribute value for Idtypevehicule, using the alias name Idtypevehicule.
     * @return the value of Idtypevehicule
     */
    public BigDecimal getIdtypevehicule() {
        return (BigDecimal) getAttributeInternal(IDTYPEVEHICULE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idtypevehicule.
     * @param value value to set the Idtypevehicule
     */
    public void setIdtypevehicule(BigDecimal value) {
        setAttributeInternal(IDTYPEVEHICULE, value);
    }

    /**
     * Gets the attribute value for Codechiffre, using the alias name Codechiffre.
     * @return the value of Codechiffre
     */
    public Integer getCodechiffre() {
        return (Integer) getAttributeInternal(CODECHIFFRE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Codechiffre.
     * @param value value to set the Codechiffre
     */
    public void setCodechiffre(Integer value) {
        setAttributeInternal(CODECHIFFRE, value);
    }

    /**
     * Gets the attribute value for SuffixLettre, using the alias name SuffixLettre.
     * @return the value of SuffixLettre
     */
    public String getSuffixLettre() {
        return (String) getAttributeInternal(SUFFIXLETTRE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SuffixLettre.
     * @param value value to set the SuffixLettre
     */
    public void setSuffixLettre(String value) {
        setAttributeInternal(SUFFIXLETTRE, value);
    }

    /**
     * Gets the attribute value for Immatriculation, using the alias name Immatriculation.
     * @return the value of Immatriculation
     */
    public String getImmatriculation() {
        String codeRegion = "";
        String codeTypeVehicule = "";
        
        if(getIdregion() != null)
        {
            ViewObject vo = rechercherVue("RegionView2");
            vo.setWhereClause(null);
            vo.setWhereClauseParams(null);
            vo.setWhereClause("Region.Idregions = ?");
            vo.setWhereClauseParam(0, getIdregion());
            vo.executeQuery();
            if (vo.hasNext()) {
                Row r = vo.next();
                String result = (String) r.getAttribute("Coderegion");
                if(result != null)
                    codeRegion = result;
            }
            vo.setWhereClause(null);
            vo.setWhereClauseParams(null);
            vo.executeQuery();
        }
        
        if(getIdtypevehicule() != null)
        {
            ViewObject vo = rechercherVue("TypeVehiculeForMeView1");
            vo.setWhereClause(null);
            vo.setWhereClauseParams(null);
            vo.setWhereClause("idtypevehicule = ?");
            vo.setWhereClauseParam(0, getIdtypevehicule());
            vo.executeQuery();
            if (vo.hasNext()) {
                Row r = vo.next();
                String result = (String) r.getAttribute(1);
                if(result != null)
                    codeTypeVehicule = result;
            }
            vo.setWhereClause(null);
            vo.setWhereClauseParams(null);
            vo.executeQuery();
        } 
        
        return codeRegion + " " + codeTypeVehicule + " " + getCodechiffre().toString() + " " + getSuffixLettre();
        //return (String) getAttributeInternal(IMMATRICULATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Immatriculation.
     * @param value value to set the Immatriculation
     */
    public void setImmatriculation(String value) {
        System.out.println("Ne doit pas etre modifiable");
        setAttributeInternal(IMMATRICULATION, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getVehicule() {
        return (RowIterator) getAttributeInternal(VEHICULE);
    }

    /**
     * @return the associated entity VehiculeImpl.
     */
    public VehiculeImpl getIdtypevehiculeVehicule() {
        return (VehiculeImpl) getAttributeInternal(IDTYPEVEHICULEVEHICULE);
    }

    /**
     * Sets <code>value</code> as the associated entity VehiculeImpl.
     */
    public void setIdtypevehiculeVehicule(VehiculeImpl value) {
        setAttributeInternal(IDTYPEVEHICULEVEHICULE, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getVehicule1() {
        return (RowIterator) getAttributeInternal(VEHICULE1);
    }

    /**
     * @return the associated entity VehiculeImpl.
     */
    public VehiculeImpl getIdregionVehicule() {
        return (VehiculeImpl) getAttributeInternal(IDREGIONVEHICULE);
    }

    /**
     * Sets <code>value</code> as the associated entity VehiculeImpl.
     */
    public void setIdregionVehicule(VehiculeImpl value) {
        setAttributeInternal(IDREGIONVEHICULE, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getVehicule2() {
        return (RowIterator) getAttributeInternal(VEHICULE2);
    }

    /**
     * @return the associated entity VehiculeImpl.
     */
    public VehiculeImpl getIdtransporteurVehicule() {
        return (VehiculeImpl) getAttributeInternal(IDTRANSPORTEURVEHICULE);
    }

    /**
     * Sets <code>value</code> as the associated entity VehiculeImpl.
     */
    public void setIdtransporteurVehicule(VehiculeImpl value) {
        setAttributeInternal(IDTRANSPORTEURVEHICULE, value);
    }

    /**
     * @return the associated entity TransporteurImpl.
     */
    public TransporteurImpl getTransporteur() {
        return (TransporteurImpl) getAttributeInternal(TRANSPORTEUR);
    }

    /**
     * Sets <code>value</code> as the associated entity TransporteurImpl.
     */
    public void setTransporteur(TransporteurImpl value) {
        setAttributeInternal(TRANSPORTEUR, value);
    }

    /**
     * @return the associated entity RegionImpl.
     */
    public RegionImpl getRegion() {
        return (RegionImpl) getAttributeInternal(REGION);
    }

    /**
     * Sets <code>value</code> as the associated entity RegionImpl.
     */
    public void setRegion(RegionImpl value) {
        setAttributeInternal(REGION, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTypevehicule() {
        return (EntityImpl) getAttributeInternal(TYPEVEHICULE);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTypevehicule(EntityImpl value) {
        setAttributeInternal(TYPEVEHICULE, value);
    }


    /**
     * @param idvehicule key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal idvehicule) {
        return new Key(new Object[] { idvehicule });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            BigDecimal id = getLastId("getLastIdVehicule1");
            setIdvehicule(id);
        }
        super.doDML(operation, e);
    }
    
    public BigDecimal getLastId(String viewName) {
        BigDecimal lastId = new BigDecimal(0);
        ViewObject vo = this.getDBTransaction()
                            .getRootApplicationModule()
                            .findViewObject(viewName);
        vo.executeQuery();
        if (vo.hasNext()) {
            System.out.println("entree dans la condition hasNext");
            Row r = vo.next();
            System.out.println("row = " + r);
            lastId = (BigDecimal) r.getAttribute(0);
        }
        BigDecimal un = new BigDecimal(1);
        lastId = lastId.add(un);
        return lastId; 
    }
    
    public ViewObject rechercherVue(String viewName) {
        ViewObject vo = this.getDBTransaction()
                            .getRootApplicationModule()
                            .findViewObject(viewName);
        return vo; 
        }
    
}

