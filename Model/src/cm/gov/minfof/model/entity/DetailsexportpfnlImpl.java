package cm.gov.minfof.model.entity;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 13 13:54:35 WAT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DetailsexportpfnlImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Iddetailsexportpfnl,
        Idexportpfnl,
        Idunitemesure,
        Quantite,
        Observations,
        Idpartieproduitpfnl,
        Idcertificat,
        Idpays,
        numeroco,
        Detailsexportpfnl,
        IdunitemesureDetailsexportpfnl,
        Detailsexportpfnl1,
        IdpartieproduitpfnlDetailsexportpfnl,
        Detailsexportpfnl2,
        IdexportpfnlDetailsexportpfnl,
        Unitemesure,
        PartiesProduitsPfnl,
        Exportpfnl;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDDETAILSEXPORTPFNL = AttributesEnum.Iddetailsexportpfnl.index();
    public static final int IDEXPORTPFNL = AttributesEnum.Idexportpfnl.index();
    public static final int IDUNITEMESURE = AttributesEnum.Idunitemesure.index();
    public static final int QUANTITE = AttributesEnum.Quantite.index();
    public static final int OBSERVATIONS = AttributesEnum.Observations.index();
    public static final int IDPARTIEPRODUITPFNL = AttributesEnum.Idpartieproduitpfnl.index();
    public static final int IDCERTIFICAT = AttributesEnum.Idcertificat.index();
    public static final int IDPAYS = AttributesEnum.Idpays.index();
    public static final int NUMEROCO = AttributesEnum.numeroco.index();
    public static final int DETAILSEXPORTPFNL = AttributesEnum.Detailsexportpfnl.index();
    public static final int IDUNITEMESUREDETAILSEXPORTPFNL = AttributesEnum.IdunitemesureDetailsexportpfnl.index();
    public static final int DETAILSEXPORTPFNL1 = AttributesEnum.Detailsexportpfnl1.index();
    public static final int IDPARTIEPRODUITPFNLDETAILSEXPORTPFNL =
        AttributesEnum.IdpartieproduitpfnlDetailsexportpfnl.index();
    public static final int DETAILSEXPORTPFNL2 = AttributesEnum.Detailsexportpfnl2.index();
    public static final int IDEXPORTPFNLDETAILSEXPORTPFNL = AttributesEnum.IdexportpfnlDetailsexportpfnl.index();
    public static final int UNITEMESURE = AttributesEnum.Unitemesure.index();
    public static final int PARTIESPRODUITSPFNL = AttributesEnum.PartiesProduitsPfnl.index();
    public static final int EXPORTPFNL = AttributesEnum.Exportpfnl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DetailsexportpfnlImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("cm.gov.minfof.model.entity.Detailsexportpfnl");
    }


    /**
     * Gets the attribute value for Iddetailsexportpfnl, using the alias name Iddetailsexportpfnl.
     * @return the value of Iddetailsexportpfnl
     */
    public BigDecimal getIddetailsexportpfnl() {
        return (BigDecimal) getAttributeInternal(IDDETAILSEXPORTPFNL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Iddetailsexportpfnl.
     * @param value value to set the Iddetailsexportpfnl
     */
    public void setIddetailsexportpfnl(BigDecimal value) {
        setAttributeInternal(IDDETAILSEXPORTPFNL, value);
    }

    /**
     * Gets the attribute value for Idexportpfnl, using the alias name Idexportpfnl.
     * @return the value of Idexportpfnl
     */
    public BigDecimal getIdexportpfnl() {
        return (BigDecimal) getAttributeInternal(IDEXPORTPFNL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idexportpfnl.
     * @param value value to set the Idexportpfnl
     */
    public void setIdexportpfnl(BigDecimal value) {
        setAttributeInternal(IDEXPORTPFNL, value);
    }

    /**
     * Gets the attribute value for Idunitemesure, using the alias name Idunitemesure.
     * @return the value of Idunitemesure
     */
    public BigDecimal getIdunitemesure() {
        return (BigDecimal) getAttributeInternal(IDUNITEMESURE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idunitemesure.
     * @param value value to set the Idunitemesure
     */
    public void setIdunitemesure(BigDecimal value) {
        setAttributeInternal(IDUNITEMESURE, value);
    }

    /**
     * Gets the attribute value for Quantite, using the alias name Quantite.
     * @return the value of Quantite
     */
    public Float getQuantite() {
        return (Float) getAttributeInternal(QUANTITE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quantite.
     * @param value value to set the Quantite
     */
    public void setQuantite(Float value) {
        setAttributeInternal(QUANTITE, value);
    }

    /**
     * Gets the attribute value for Observations, using the alias name Observations.
     * @return the value of Observations
     */
    public String getObservations() {
        return (String) getAttributeInternal(OBSERVATIONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Observations.
     * @param value value to set the Observations
     */
    public void setObservations(String value) {
        setAttributeInternal(OBSERVATIONS, value);
    }

    /**
     * Gets the attribute value for Idpartieproduitpfnl, using the alias name Idpartieproduitpfnl.
     * @return the value of Idpartieproduitpfnl
     */
    public BigDecimal getIdpartieproduitpfnl() {
        return (BigDecimal) getAttributeInternal(IDPARTIEPRODUITPFNL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idpartieproduitpfnl.
     * @param value value to set the Idpartieproduitpfnl
     */
    public void setIdpartieproduitpfnl(BigDecimal value) {
        setAttributeInternal(IDPARTIEPRODUITPFNL, value);
    }

    /**
     * Gets the attribute value for Idcertificat, using the alias name Idcertificat.
     * @return the value of Idcertificat
     */
    public BigDecimal getIdcertificat() {
        return (BigDecimal) getAttributeInternal(IDCERTIFICAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idcertificat.
     * @param value value to set the Idcertificat
     */
    public void setIdcertificat(BigDecimal value) {
        setAttributeInternal(IDCERTIFICAT, value);
    }

    /**
     * Gets the attribute value for Idpays, using the alias name Idpays.
     * @return the value of Idpays
     */
    public BigDecimal getIdpays() {
        return (BigDecimal) getAttributeInternal(IDPAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idpays.
     * @param value value to set the Idpays
     */
    public void setIdpays(BigDecimal value) {
        setAttributeInternal(IDPAYS, value);
    }


    /**
     * Gets the attribute value for numeroco, using the alias name numeroco.
     * @return the value of numeroco
     */
    public String getnumeroco() {
        
        return (String) getAttributeInternal(NUMEROCO);
    }

    /**
     * Sets <code>value</code> as the attribute value for numeroco.
     * @param value value to set the numeroco
     */
    public void setnumeroco(String value) {
        setAttributeInternal(NUMEROCO, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDetailsexportpfnl() {
        return (RowIterator) getAttributeInternal(DETAILSEXPORTPFNL);
    }

    /**
     * @return the associated entity DetailsexportpfnlImpl.
     */
    public DetailsexportpfnlImpl getIdunitemesureDetailsexportpfnl() {
        return (DetailsexportpfnlImpl) getAttributeInternal(IDUNITEMESUREDETAILSEXPORTPFNL);
    }

    /**
     * Sets <code>value</code> as the associated entity DetailsexportpfnlImpl.
     */
    public void setIdunitemesureDetailsexportpfnl(DetailsexportpfnlImpl value) {
        setAttributeInternal(IDUNITEMESUREDETAILSEXPORTPFNL, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDetailsexportpfnl1() {
        return (RowIterator) getAttributeInternal(DETAILSEXPORTPFNL1);
    }

    /**
     * @return the associated entity DetailsexportpfnlImpl.
     */
    public DetailsexportpfnlImpl getIdpartieproduitpfnlDetailsexportpfnl() {
        return (DetailsexportpfnlImpl) getAttributeInternal(IDPARTIEPRODUITPFNLDETAILSEXPORTPFNL);
    }

    /**
     * Sets <code>value</code> as the associated entity DetailsexportpfnlImpl.
     */
    public void setIdpartieproduitpfnlDetailsexportpfnl(DetailsexportpfnlImpl value) {
        setAttributeInternal(IDPARTIEPRODUITPFNLDETAILSEXPORTPFNL, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDetailsexportpfnl2() {
        return (RowIterator) getAttributeInternal(DETAILSEXPORTPFNL2);
    }

    /**
     * @return the associated entity DetailsexportpfnlImpl.
     */
    public DetailsexportpfnlImpl getIdexportpfnlDetailsexportpfnl() {
        return (DetailsexportpfnlImpl) getAttributeInternal(IDEXPORTPFNLDETAILSEXPORTPFNL);
    }

    /**
     * Sets <code>value</code> as the associated entity DetailsexportpfnlImpl.
     */
    public void setIdexportpfnlDetailsexportpfnl(DetailsexportpfnlImpl value) {
        setAttributeInternal(IDEXPORTPFNLDETAILSEXPORTPFNL, value);
    }

    /**
     * @return the associated entity UnitemesureImpl.
     */
    public UnitemesureImpl getUnitemesure() {
        return (UnitemesureImpl) getAttributeInternal(UNITEMESURE);
    }

    /**
     * Sets <code>value</code> as the associated entity UnitemesureImpl.
     */
    public void setUnitemesure(UnitemesureImpl value) {
        setAttributeInternal(UNITEMESURE, value);
    }

    /**
     * @return the associated entity PartiesProduitsPfnlImpl.
     */
    public PartiesProduitsPfnlImpl getPartiesProduitsPfnl() {
        return (PartiesProduitsPfnlImpl) getAttributeInternal(PARTIESPRODUITSPFNL);
    }

    /**
     * Sets <code>value</code> as the associated entity PartiesProduitsPfnlImpl.
     */
    public void setPartiesProduitsPfnl(PartiesProduitsPfnlImpl value) {
        setAttributeInternal(PARTIESPRODUITSPFNL, value);
    }

    /**
     * @return the associated entity ExportpfnlImpl.
     */
    public ExportpfnlImpl getExportpfnl() {
        return (ExportpfnlImpl) getAttributeInternal(EXPORTPFNL);
    }

    /**
     * Sets <code>value</code> as the associated entity ExportpfnlImpl.
     */
    public void setExportpfnl(ExportpfnlImpl value) {
        setAttributeInternal(EXPORTPFNL, value);
    }


    /**
     * @param iddetailsexportpfnl key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal iddetailsexportpfnl) {
        return new Key(new Object[] { iddetailsexportpfnl });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            BigDecimal id = getLastId("getLastIdDetailsexport1");
            setIddetailsexportpfnl(id);
        }
        super.doDML(operation, e);
    }
    
    public BigDecimal getLastId(String viewName) {
        BigDecimal lastId=new BigDecimal(0);
        ViewObject vo = this.getDBTransaction()
                            .getRootApplicationModule()
                            .findViewObject(viewName);
        vo.executeQuery();
        if (vo.hasNext()) {
            Row r = vo.next();
            lastId = (BigDecimal) r.getAttribute(0);
        }
        BigDecimal un = new BigDecimal(1);
        lastId = lastId.add(un);
        return lastId; 
    }
}

