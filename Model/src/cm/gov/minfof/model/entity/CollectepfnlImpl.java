package cm.gov.minfof.model.entity;

import java.math.BigDecimal;

import java.sql.Date;

import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 04 12:29:37 WAT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CollectepfnlImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Idcollectepfnl,
        Datecollecte,
        Iddepartement,
        Idlocalite,
        Idposte,
        Idutilisateur,
        idregional,
        iddepartmental,
        nomposte,
        nomdepartement,
        nomlocalite,
        idusr,
        nomuser,
        Idregion,
        Numerocollecte,
        Identificateur,
        nomregion,
        Collectepfnl,
        IdlocaliteCollectepfnl,
        Detailscollectepfnl,
        Departement,
        LettreVoiturePc,
        LettreVoiturePc1,
        LettreVoiturePc2,
        LettreVoiturePc3,
        LettreVoiturePc4,
        TypeDocument,
        TypeDocument1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDCOLLECTEPFNL = AttributesEnum.Idcollectepfnl.index();
    public static final int DATECOLLECTE = AttributesEnum.Datecollecte.index();
    public static final int IDDEPARTEMENT = AttributesEnum.Iddepartement.index();
    public static final int IDLOCALITE = AttributesEnum.Idlocalite.index();
    public static final int IDPOSTE = AttributesEnum.Idposte.index();
    public static final int IDUTILISATEUR = AttributesEnum.Idutilisateur.index();
    public static final int IDREGIONAL = AttributesEnum.idregional.index();
    public static final int IDDEPARTMENTAL = AttributesEnum.iddepartmental.index();
    public static final int NOMPOSTE = AttributesEnum.nomposte.index();
    public static final int NOMDEPARTEMENT = AttributesEnum.nomdepartement.index();
    public static final int NOMLOCALITE = AttributesEnum.nomlocalite.index();
    public static final int IDUSR = AttributesEnum.idusr.index();
    public static final int NOMUSER = AttributesEnum.nomuser.index();
    public static final int IDREGION = AttributesEnum.Idregion.index();
    public static final int NUMEROCOLLECTE = AttributesEnum.Numerocollecte.index();
    public static final int IDENTIFICATEUR = AttributesEnum.Identificateur.index();
    public static final int NOMREGION = AttributesEnum.nomregion.index();
    public static final int COLLECTEPFNL = AttributesEnum.Collectepfnl.index();
    public static final int IDLOCALITECOLLECTEPFNL = AttributesEnum.IdlocaliteCollectepfnl.index();
    public static final int DETAILSCOLLECTEPFNL = AttributesEnum.Detailscollectepfnl.index();
    public static final int DEPARTEMENT = AttributesEnum.Departement.index();
    public static final int LETTREVOITUREPC = AttributesEnum.LettreVoiturePc.index();
    public static final int LETTREVOITUREPC1 = AttributesEnum.LettreVoiturePc1.index();
    public static final int LETTREVOITUREPC2 = AttributesEnum.LettreVoiturePc2.index();
    public static final int LETTREVOITUREPC3 = AttributesEnum.LettreVoiturePc3.index();
    public static final int LETTREVOITUREPC4 = AttributesEnum.LettreVoiturePc4.index();
    public static final int TYPEDOCUMENT = AttributesEnum.TypeDocument.index();
    public static final int TYPEDOCUMENT1 = AttributesEnum.TypeDocument1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CollectepfnlImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("cm.gov.minfof.model.entity.Collectepfnl");
    }


    /**
     * Gets the attribute value for Idcollectepfnl, using the alias name Idcollectepfnl.
     * @return the value of Idcollectepfnl
     */
    public BigDecimal getIdcollectepfnl() {
        return (BigDecimal) getAttributeInternal(IDCOLLECTEPFNL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idcollectepfnl.
     * @param value value to set the Idcollectepfnl
     */
    public void setIdcollectepfnl(BigDecimal value) {
        setAttributeInternal(IDCOLLECTEPFNL, value);
    }

    /**
     * Gets the attribute value for Datecollecte, using the alias name Datecollecte.
     * @return the value of Datecollecte
     */
    public Timestamp getDatecollecte() {
        return (Timestamp) getAttributeInternal(DATECOLLECTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Datecollecte.
     * @param value value to set the Datecollecte
     */
    public void setDatecollecte(Timestamp value) {
        setAttributeInternal(DATECOLLECTE, value);
    }


    /**
     * Gets the attribute value for Iddepartement, using the alias name Iddepartement.
     * @return the value of Iddepartement
     */
    public BigDecimal getIddepartement() {
        return (BigDecimal) getAttributeInternal(IDDEPARTEMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Iddepartement.
     * @param value value to set the Iddepartement
     */
    public void setIddepartement(BigDecimal value) {
        setAttributeInternal(IDDEPARTEMENT, value);
    }


    /**
     * Gets the attribute value for Idlocalite, using the alias name Idlocalite.
     * @return the value of Idlocalite
     */
    public BigDecimal getIdlocalite() {
        return (BigDecimal) getAttributeInternal(IDLOCALITE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idlocalite.
     * @param value value to set the Idlocalite
     */
    public void setIdlocalite(BigDecimal value) {
        setAttributeInternal(IDLOCALITE, value);
    }

    /**
     * Gets the attribute value for Idposte, using the alias name Idposte.
     * @return the value of Idposte
     */
    public BigDecimal getIdposte() {
        return (BigDecimal) getAttributeInternal(IDPOSTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idposte.
     * @param value value to set the Idposte
     */
    public void setIdposte(BigDecimal value) {
        setAttributeInternal(IDPOSTE, value);
    }

    /**
     * Gets the attribute value for Idutilisateur, using the alias name Idutilisateur.
     * @return the value of Idutilisateur
     */
    public BigDecimal getIdutilisateur() {
        return (BigDecimal) getAttributeInternal(IDUTILISATEUR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idutilisateur.
     * @param value value to set the Idutilisateur
     */
    public void setIdutilisateur(BigDecimal value) {
        setAttributeInternal(IDUTILISATEUR, value);
    }

    /**
     * Gets the attribute value for idregional, using the alias name idregional.
     * @return the value of idregional
     */
    public BigDecimal getidregional() {
        FacesContext fc = FacesContext.getCurrentInstance();
        HttpSession session = (HttpSession) fc.getExternalContext().getSession(true);
        UserData ud = (UserData) session.getAttribute("user");
        System.out.println("Id region ="+ud.getIdregion());
        return ud.getIdregion();
        //return (BigDecimal) getAttributeInternal(IDREGIONAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for idregional.
     * @param value value to set the idregional
     */
    public void setidregional(BigDecimal value) {
        setAttributeInternal(IDREGIONAL, value);
    }

    /**
     * Gets the attribute value for iddepartmental, using the alias name iddepartmental.
     * @return the value of iddepartmental
     */
    public BigDecimal getiddepartmental() {
        FacesContext fc = FacesContext.getCurrentInstance();
        HttpSession session = (HttpSession) fc.getExternalContext().getSession(true);
        UserData ud = (UserData) session.getAttribute("user");
        System.out.println("Id d√©partement"+ud.getIddepartement());
        return ud.getIddepartement();
        //return (BigDecimal) getAttributeInternal(IDDEPARTMENTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for iddepartmental.
     * @param value value to set the iddepartmental
     */
    public void setiddepartmental(BigDecimal value) {
        setAttributeInternal(IDDEPARTMENTAL, value);
    }

    /**
     * Gets the attribute value for nomposte, using the alias name nomposte.
     * @return the value of nomposte
     */
    public String getnomposte() {
        return (String) getAttributeInternal(NOMPOSTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for nomposte.
     * @param value value to set the nomposte
     */
    public void setnomposte(String value) {
        setAttributeInternal(NOMPOSTE, value);
    }

    /**
     * Gets the attribute value for nomdepartement, using the alias name nomdepartement.
     * @return the value of nomdepartement
     */
    public String getnomdepartement() {
        return (String) getAttributeInternal(NOMDEPARTEMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for nomdepartement.
     * @param value value to set the nomdepartement
     */
    public void setnomdepartement(String value) {
        setAttributeInternal(NOMDEPARTEMENT, value);
    }

    /**
     * Gets the attribute value for nomlocalite, using the alias name nomlocalite.
     * @return the value of nomlocalite
     */
    public String getnomlocalite() {
        return (String) getAttributeInternal(NOMLOCALITE);
    }

    /**
     * Sets <code>value</code> as the attribute value for nomlocalite.
     * @param value value to set the nomlocalite
     */
    public void setnomlocalite(String value) {
        setAttributeInternal(NOMLOCALITE, value);
    }

    /**
     * Gets the attribute value for idusr, using the alias name idusr.
     * @return the value of idusr
     */
    public BigDecimal getidusr() {
        FacesContext fc = FacesContext.getCurrentInstance();
        HttpSession session = (HttpSession) fc.getExternalContext().getSession(true);
        UserData ud = (UserData) session.getAttribute("user");
        //System.out.println("Id d√©partement"+ud.getIddepartement());
        return ud.getIdutilisateur();
        //return (BigDecimal) getAttributeInternal(IDUSR);
    }

    /**
     * Sets <code>value</code> as the attribute value for idusr.
     * @param value value to set the idusr
     */
    public void setidusr(BigDecimal value) {
        setAttributeInternal(IDUSR, value);
    }

    /**
     * Gets the attribute value for nomuser, using the alias name nomuser.
     * @return the value of nomuser
     */
    public String getnomuser() {
        return (String) getAttributeInternal(NOMUSER);
    }

    /**
     * Sets <code>value</code> as the attribute value for nomuser.
     * @param value value to set the nomuser
     */
    public void setnomuser(String value) {
        setAttributeInternal(NOMUSER, value);
    }


    /**
     * Gets the attribute value for Idregion, using the alias name Idregion.
     * @return the value of Idregion
     */
    public BigDecimal getIdregion() {
        return (BigDecimal) getAttributeInternal(IDREGION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idregion.
     * @param value value to set the Idregion
     */
    public void setIdregion(BigDecimal value) {
        setAttributeInternal(IDREGION, value);
    }

    /**
     * Gets the attribute value for Numerocollecte, using the alias name Numerocollecte.
     * @return the value of Numerocollecte
     */
    public String getNumerocollecte() {
        return (String) getAttributeInternal(NUMEROCOLLECTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Numerocollecte.
     * @param value value to set the Numerocollecte
     */
    public void setNumerocollecte(String value) {
        setAttributeInternal(NUMEROCOLLECTE, value);
    }

    /**
     * Gets the attribute value for Identificateur, using the alias name Identificateur.
     * @return the value of Identificateur
     */
    public String getIdentificateur() {
        return (String) getAttributeInternal(IDENTIFICATEUR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Identificateur.
     * @param value value to set the Identificateur
     */
    public void setIdentificateur(String value) {
        setAttributeInternal(IDENTIFICATEUR, value);
    }

    /**
     * Gets the attribute value for nomregion, using the alias name nomregion.
     * @return the value of nomregion
     */
    public String getnomregion() {
        return (String) getAttributeInternal(NOMREGION);
    }

    /**
     * Sets <code>value</code> as the attribute value for nomregion.
     * @param value value to set the nomregion
     */
    public void setnomregion(String value) {
        setAttributeInternal(NOMREGION, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getCollectepfnl() {
        return (RowIterator) getAttributeInternal(COLLECTEPFNL);
    }

    /**
     * @return the associated entity CollectepfnlImpl.
     */
    public CollectepfnlImpl getIdlocaliteCollectepfnl() {
        return (CollectepfnlImpl) getAttributeInternal(IDLOCALITECOLLECTEPFNL);
    }

    /**
     * Sets <code>value</code> as the associated entity CollectepfnlImpl.
     */
    public void setIdlocaliteCollectepfnl(CollectepfnlImpl value) {
        setAttributeInternal(IDLOCALITECOLLECTEPFNL, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDetailscollectepfnl() {
        return (RowIterator) getAttributeInternal(DETAILSCOLLECTEPFNL);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDepartement() {
        return (RowIterator) getAttributeInternal(DEPARTEMENT);
    }


    /**
     * @return the associated entity LettreVoiturePcImpl.
     */
    public LettreVoiturePcImpl getLettreVoiturePc() {
        return (LettreVoiturePcImpl) getAttributeInternal(LETTREVOITUREPC);
    }

    /**
     * Sets <code>value</code> as the associated entity LettreVoiturePcImpl.
     */
    public void setLettreVoiturePc(LettreVoiturePcImpl value) {
        setAttributeInternal(LETTREVOITUREPC, value);
    }

    /**
     * @return the associated entity LettreVoiturePcImpl.
     */
    public LettreVoiturePcImpl getLettreVoiturePc1() {
        return (LettreVoiturePcImpl) getAttributeInternal(LETTREVOITUREPC1);
    }

    /**
     * Sets <code>value</code> as the associated entity LettreVoiturePcImpl.
     */
    public void setLettreVoiturePc1(LettreVoiturePcImpl value) {
        setAttributeInternal(LETTREVOITUREPC1, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getLettreVoiturePc2() {
        return (RowIterator) getAttributeInternal(LETTREVOITUREPC2);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getLettreVoiturePc3() {
        return (RowIterator) getAttributeInternal(LETTREVOITUREPC3);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getLettreVoiturePc4() {
        return (RowIterator) getAttributeInternal(LETTREVOITUREPC4);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTypeDocument() {
        return (EntityImpl) getAttributeInternal(TYPEDOCUMENT);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTypeDocument(EntityImpl value) {
        setAttributeInternal(TYPEDOCUMENT, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTypeDocument1() {
        return (EntityImpl) getAttributeInternal(TYPEDOCUMENT1);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTypeDocument1(EntityImpl value) {
        setAttributeInternal(TYPEDOCUMENT1, value);
    }


    /**
     * @param idcollectepfnl key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal idcollectepfnl) {
        return new Key(new Object[] { idcollectepfnl });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            BigDecimal id = getLastId("getLastIdCollectePfnl1");
            setIdcollectepfnl(id);
        }
        super.doDML(operation, e);
    }
    
    public BigDecimal getLastId(String viewName) {
        BigDecimal lastId=new BigDecimal(0);
        ViewObject vo = this.getDBTransaction()
                            .getRootApplicationModule()
                            .findViewObject(viewName);
        vo.executeQuery();
        if (vo.hasNext()) {
            Row r = vo.next();
            lastId = (BigDecimal) r.getAttribute(0);
        }
        BigDecimal un = new BigDecimal(1);
        lastId = lastId.add(un);
        return lastId; 
    }
}

