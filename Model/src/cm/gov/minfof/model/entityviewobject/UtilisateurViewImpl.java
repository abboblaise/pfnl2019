package cm.gov.minfof.model.entityviewobject;

import cm.gov.minfof.model.entity.UserData;


import java.math.BigDecimal;

import java.sql.ResultSet;

import javax.faces.component.UIViewRoot;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.adf.model.binding.DCIteratorBinding;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 10 12:34:18 CET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UtilisateurViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public UtilisateurViewImpl() {
    }

    /**
     * executeQueryForCollection - for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    public void setPwd(BigDecimal uid, String password1) {
        // TODO Implement this method
        RowSetIterator rSet = this.createRowSetIterator(null);
        UtilisateurViewRowImpl rr;
        
        while (rSet.hasNext()){
            
            rr = (UtilisateurViewRowImpl)rSet.next();
            if(rr.getIdutilisateur().equals(uid)){
                rr.setPassworduser(password1);
                rr.setPremiereconnexion(false);
            }
        }
        this.getDBTransaction().commit();
    }
    
    public void updateUer(BigDecimal uid, String nomuser, String phoneuser, String mailuser) {
        // TODO Implement this method
        RowSetIterator rSet = this.createRowSetIterator(null);
        UtilisateurViewRowImpl rr;
        
        while (rSet.hasNext()){
            
            rr = (UtilisateurViewRowImpl)rSet.next();
            if(rr.getIdutilisateur().equals(uid)){
                rr.setNomuser(nomuser);
                rr.setTelephone(phoneuser);
                rr.setEmailuser(mailuser);
            }
        }
        this.getDBTransaction().commit();
    }
    
}

