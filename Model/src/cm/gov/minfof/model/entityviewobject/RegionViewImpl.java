package cm.gov.minfof.model.entityviewobject;

import cm.gov.minfof.model.entity.UserData;

import java.math.BigDecimal;

import java.sql.ResultSet;

import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 27 11:59:43 WAT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
//public class RegionViewImpl extends ViewObjectImpl {
public class RegionViewImpl extends VueImplementation {
    /**
     * This is the default constructor (do not remove).
     */
    public RegionViewImpl() {
    }

    /**
     * executeQueryForCollection - for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        System.out.println("req region = " + this.getQuery());
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
/*    @Override
    protected String buildQuery(int noUserParams, boolean forRowCount)
    {
        System.out.println("entree dans buildQuery 1");
        String query = super.buildQuery(noUserParams, forRowCount);
        System.out.println(" avant query1 = " + query);
        if (query!=null) {
            query = query.replace( "LIKE UPPER( ? || '%')", "LIKE UPPER(CONCAT( ?, '%' ))");
            query = query.replace("LIKE ( ? || '%')", "LIKE CONCAT(?, '%')");
        }
        System.out.println(" apr??s query1 = " + query);
        System.out.println();
        return query;
    }

    @Override
    protected String buildQuery(int noUserParams, boolean forRowCount, String selClause, String fromClause, String whereClause, int subQueryLevel)
    {
        System.out.println();
        System.out.println("entree dans buildQuery 2");
        String query = super.buildQuery(noUserParams, forRowCount, selClause, fromClause, whereClause, subQueryLevel);
          System.out.println("avant query2 = " + query);
        if (query!=null) {
          query = query.replace( "LIKE UPPER( ? || '%')", "LIKE UPPER(CONCAT( ?, '%' ))");
          query = query.replace("LIKE ( ? || '%')", "LIKE CONCAT(?, '%')");
        }
        System.out.println("apr??s query2 = " + query);
        return query;
      } */

    /**
     * Returns the variable value for idRegionBind.
     * @return variable value for idRegionBind
     */
    public BigDecimal getidRegionBind() {
        return (BigDecimal) ensureVariableManager().getVariableValue("idRegionBind");
    }

    /**
     * Sets <code>value</code> for variable idRegionBind.
     * @param value value to bind as idRegionBind
     */
    public void setidRegionBind(BigDecimal value) {
        ensureVariableManager().setVariableValue("idRegionBind", value);
    }
    
    public void setIdRegionVC(BigDecimal x) {
        System.out.println("J'entre bien ici!!");
        ViewCriteria vc = getViewCriteria("RegionViewCriteria");
        vc.resetCriteria();
        setidRegionBind(x);
        applyViewCriteria(vc);
        executeQuery();
        System.out.println("Je sors bien d'ici!!");

        }
    
    public void clearIdRegionVC() {
        removeApplyViewCriteriaName("RegionViewCriteria");
        executeQuery();
        }
}

