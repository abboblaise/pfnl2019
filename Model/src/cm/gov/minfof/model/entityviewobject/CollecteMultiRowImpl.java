package cm.gov.minfof.model.entityviewobject;

import java.math.BigDecimal;

import java.sql.Date;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 21 11:56:40 WAT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CollecteMultiRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Iddetailscollectepfnl,
        Quantite,
        Idpermissionnaire,
        Idorigine,
        Idunitemesure,
        Iddestination,
        Idprovenance,
        Typeacteur,
        Idpartieproduitpfnl,
        Produit,
        Acteur,
        Nomdepartement,
        Nomlocalite,
        Nomsource,
        Intituleposte,
        Datecollecte,
        Nomuser,
        Libelleunitemesure,
        quantiteTotale,
        DepartementView1,
        LocaliteView1,
        TypeacteurView1,
        UnitemesureView1,
        getLibelleProduitPfnl1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDDETAILSCOLLECTEPFNL = AttributesEnum.Iddetailscollectepfnl.index();
    public static final int QUANTITE = AttributesEnum.Quantite.index();
    public static final int IDPERMISSIONNAIRE = AttributesEnum.Idpermissionnaire.index();
    public static final int IDORIGINE = AttributesEnum.Idorigine.index();
    public static final int IDUNITEMESURE = AttributesEnum.Idunitemesure.index();
    public static final int IDDESTINATION = AttributesEnum.Iddestination.index();
    public static final int IDPROVENANCE = AttributesEnum.Idprovenance.index();
    public static final int TYPEACTEUR = AttributesEnum.Typeacteur.index();
    public static final int IDPARTIEPRODUITPFNL = AttributesEnum.Idpartieproduitpfnl.index();
    public static final int PRODUIT = AttributesEnum.Produit.index();
    public static final int ACTEUR = AttributesEnum.Acteur.index();
    public static final int NOMDEPARTEMENT = AttributesEnum.Nomdepartement.index();
    public static final int NOMLOCALITE = AttributesEnum.Nomlocalite.index();
    public static final int NOMSOURCE = AttributesEnum.Nomsource.index();
    public static final int INTITULEPOSTE = AttributesEnum.Intituleposte.index();
    public static final int DATECOLLECTE = AttributesEnum.Datecollecte.index();
    public static final int NOMUSER = AttributesEnum.Nomuser.index();
    public static final int LIBELLEUNITEMESURE = AttributesEnum.Libelleunitemesure.index();
    public static final int QUANTITETOTALE = AttributesEnum.quantiteTotale.index();
    public static final int DEPARTEMENTVIEW1 = AttributesEnum.DepartementView1.index();
    public static final int LOCALITEVIEW1 = AttributesEnum.LocaliteView1.index();
    public static final int TYPEACTEURVIEW1 = AttributesEnum.TypeacteurView1.index();
    public static final int UNITEMESUREVIEW1 = AttributesEnum.UnitemesureView1.index();
    public static final int GETLIBELLEPRODUITPFNL1 = AttributesEnum.getLibelleProduitPfnl1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CollecteMultiRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Iddetailscollectepfnl.
     * @return the Iddetailscollectepfnl
     */
    public BigDecimal getIddetailscollectepfnl() {
        return (BigDecimal) getAttributeInternal(IDDETAILSCOLLECTEPFNL);
    }

    /**
     * Gets the attribute value for the calculated attribute Quantite.
     * @return the Quantite
     */
    public Float getQuantite() {
        return (Float) getAttributeInternal(QUANTITE);
    }

    /**
     * Gets the attribute value for the calculated attribute Idpermissionnaire.
     * @return the Idpermissionnaire
     */
    public BigDecimal getIdpermissionnaire() {
        return (BigDecimal) getAttributeInternal(IDPERMISSIONNAIRE);
    }

    /**
     * Gets the attribute value for the calculated attribute Idorigine.
     * @return the Idorigine
     */
    public BigDecimal getIdorigine() {
        return (BigDecimal) getAttributeInternal(IDORIGINE);
    }

    /**
     * Gets the attribute value for the calculated attribute Idunitemesure.
     * @return the Idunitemesure
     */
    public BigDecimal getIdunitemesure() {
        return (BigDecimal) getAttributeInternal(IDUNITEMESURE);
    }

    /**
     * Gets the attribute value for the calculated attribute Iddestination.
     * @return the Iddestination
     */
    public BigDecimal getIddestination() {
        return (BigDecimal) getAttributeInternal(IDDESTINATION);
    }

    /**
     * Gets the attribute value for the calculated attribute Idprovenance.
     * @return the Idprovenance
     */
    public BigDecimal getIdprovenance() {
        return (BigDecimal) getAttributeInternal(IDPROVENANCE);
    }

    /**
     * Gets the attribute value for the calculated attribute Typeacteur.
     * @return the Typeacteur
     */
    public Integer getTypeacteur() {
        return (Integer) getAttributeInternal(TYPEACTEUR);
    }

    /**
     * Gets the attribute value for the calculated attribute Idpartieproduitpfnl.
     * @return the Idpartieproduitpfnl
     */
    public BigDecimal getIdpartieproduitpfnl() {
        return (BigDecimal) getAttributeInternal(IDPARTIEPRODUITPFNL);
    }

    /**
     * Gets the attribute value for the calculated attribute Produit.
     * @return the Produit
     */
    public String getProduit() {
        return (String) getAttributeInternal(PRODUIT);
    }

    /**
     * Gets the attribute value for the calculated attribute Acteur.
     * @return the Acteur
     */
    public String getActeur() {
        return (String) getAttributeInternal(ACTEUR);
    }

    /**
     * Gets the attribute value for the calculated attribute Nomdepartement.
     * @return the Nomdepartement
     */
    public String getNomdepartement() {
        return (String) getAttributeInternal(NOMDEPARTEMENT);
    }

    /**
     * Gets the attribute value for the calculated attribute Nomlocalite.
     * @return the Nomlocalite
     */
    public String getNomlocalite() {
        return (String) getAttributeInternal(NOMLOCALITE);
    }

    /**
     * Gets the attribute value for the calculated attribute Nomsource.
     * @return the Nomsource
     */
    public String getNomsource() {
        return (String) getAttributeInternal(NOMSOURCE);
    }

    /**
     * Gets the attribute value for the calculated attribute Intituleposte.
     * @return the Intituleposte
     */
    public String getIntituleposte() {
        return (String) getAttributeInternal(INTITULEPOSTE);
    }

    /**
     * Gets the attribute value for the calculated attribute Datecollecte.
     * @return the Datecollecte
     */
    public Date getDatecollecte() {
        return (Date) getAttributeInternal(DATECOLLECTE);
    }

    /**
     * Gets the attribute value for the calculated attribute Nomuser.
     * @return the Nomuser
     */
    public String getNomuser() {
        return (String) getAttributeInternal(NOMUSER);
    }

    /**
     * Gets the attribute value for the calculated attribute Libelleunitemesure.
     * @return the Libelleunitemesure
     */
    public String getLibelleunitemesure() {
        return (String) getAttributeInternal(LIBELLEUNITEMESURE);
    }

    /**
     * Gets the attribute value for the calculated attribute quantiteTotale.
     * @return the quantiteTotale
     */
    public Float getquantiteTotale() {
        Float resultat = 0f;
        RowSetIterator iter = getViewObject().createRowSetIterator("CollecteMulti1Iterator");
        while (iter.hasNext()) {
            Row row = iter.next();
            Float rowValue = (Float) row.getAttribute("Quantite");
            resultat = resultat + rowValue;
        }
        iter.reset();
        iter.closeRowSetIterator();
        return resultat;
        //return (Float) getAttributeInternal(QUANTITETOTALE);
    }

    /**
     * Gets the view accessor <code>RowSet</code> DepartementView1.
     */
    public RowSet getDepartementView1() {
        return (RowSet) getAttributeInternal(DEPARTEMENTVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LocaliteView1.
     */
    public RowSet getLocaliteView1() {
        return (RowSet) getAttributeInternal(LOCALITEVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TypeacteurView1.
     */
    public RowSet getTypeacteurView1() {
        return (RowSet) getAttributeInternal(TYPEACTEURVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> UnitemesureView1.
     */
    public RowSet getUnitemesureView1() {
        return (RowSet) getAttributeInternal(UNITEMESUREVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> getLibelleProduitPfnl1.
     */
    public RowSet getgetLibelleProduitPfnl1() {
        return (RowSet) getAttributeInternal(GETLIBELLEPRODUITPFNL1);
    }
}

